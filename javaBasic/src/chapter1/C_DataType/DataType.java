package chapter1.C_DataType;


//데이터 타입
//각각의 데이터들은 자바에서 지정한 여러 종류의 타입이 존재
//(프로그래밍 언어라고 말하면 대부분의 경우, 자바라고 하면 자바만 그런 경우)
//기본적으로 정수형, 실수형, 문자형, 논리형이 존재 (기본형 데이터 타입)
//추가적으로 참조형 데이터 타입 

//일반적으로 특정한 데이터 타입으로 정의된 변수 혹은 상수는 같은 데이터 타입의 데이터로만 연산이 가능
public class DataType { //클래스 데이터 타입

	public static void main(String[] args) {
		// 정수 타입
		
		//byte type
		// 1 byte(-128 ~ 127) 크기의 데이터를 가질 수 있는 데이터 타입
		byte byte1 = 127;
//		byte1 = 128; 초과하는 범위는 들어갈 수 없다. 타입미스매치 오류
		
		//short type
		// 2 byte (-32,768 ~ 32,767)크기의 데이터를 가질 수 있는 데이터 타입
		short short1 = 32767;
//		short1 = 32768; //초과하는 범위는 들어갈 수 없다. 타입을 벗어 났다는 오류가 뜬다
		
		//int type : 많이쓰임
		// 4 byte (-2,147,483,648 ~ -2,147,483,647) 크기의 데이터를 가질 수 있는 데이터 타입
		int int1 = 2_147_483_647 ; //int class byte같은 키워드는 변수로 사용할수 없다
		 			// 큰수 단위를 표현할때는 , 아니고 _로 나눠서 표현하면 된다.
//		int1 = 2_147_483_648 ; //리터럴상수에 들어오는 자리는 int 범위내에만 들어올 수 있다. 
		
		//long type
		// 8 byte (-2^63 ~ 2^63 -1)크기의 데이터를 가질 수 있는 정수형 데이터 타입
		// 정수타입의 리터럴 상수의 데이터 타입은 int 타입이기때문에
		// long 타입의 리터럴 상수를 지정할 땐 리터럴 상수 뒤에 L을 붙여준다.
//		long long1 = 12_147_483_647; //리터럴 상수가 저 long타입을 잡지 못한다. 리터럴 범위 벗어났다는 오류가 뜸
		long long1 = 12_147_483_647L;
		
		// 실수타입
		
		//float type : 많이쓰임
		//4 byte(1.4 * 10^-45 ~ 3.4 * 10^38) 크기의 데이터를 가질 수 있는 실수형태 데이터 타입
		//일부는 실수, 일부는 정수 표현
		//실수타입의 리터럴 상수의 데이터 타입은 double이므로 
		//float 타입의 리터럴 상수를 지정할땐 리터럴 상수 뒤에 F를 붙여준다.
//		float float1 = 3.14; //타입 미스매치 오류 3.14의 형태는 double이므로  float형이 미스매치
		float float2 = 3.15F;
		//float은 소수점 6번째 자리에서 오차가 발생
		
		
		//double type
		//8 byte (4.9 * 10^-324 ~ 1.8 * 10^308)크기의  데이터를 가질 수 있는 실수형 데이터 타입
		double double1 = 3.1415;
		//double은 소수점 15번째 자리에서 오차가 발생 //일반적으로 리터럴 상수가 double이기때문에 double 많이 쓴다
		
		// 문자타입
		
		// char type
		// 2 byte (0 ~ 65,535)크기의 데이터를 가질 수 있는 문자형 데이터 타입 //short과 달리 부호부를 쓰지않아서 저 크기를 차지함.
		// 문자 (단어 아님!) 하나를 저장 할수 있는 공간
		// 한 문자를 표기 할 땐 ''로 묶어서 표기
		char char1 = 'a';
		char char2 = 97; //아스키 코드 영소문자 시작이 97
		//음수를 char로 표시할 수 없다.
		
		// 논리타입
		
		//boolean type : 많이쓰임
		// 1 byte (false(0), true(1))크기의 데이처를 가질 수 있는 논리형 데이터 타입
		boolean boolean1 = true;
		boolean1 = false;
		
		//boolean을 반환하는 데이터명 적을때 ~is어쩌구 , ~has어쩌구 로 데이터명 지정한다.
		//단순 true false 값만 저장할때는 ~flag~ 저장명 쓴다.
		
		
		// 형 변환 (Type casting)
		
		//용량이 큰 상자를 작은 상자에 넣으려고 하는건 물리적으로 불가능
		//float (4byte)에 double(8byte)을 넣으려고 하면 안된다.
		//같은 1값이라고 하더라도 용량 큰 상자의 앞에는 다른 bit들이 차있기때문에 들어가지 않는다. 
		
		// 자동 형변환 (묵시적 형변환)
		// 차지하는 "범위"가 작은 데이터타입은 범위가 큰 데이터타입으로 자동 형변환 된다. (작은 상자에서 큰 상자로 옮기는 것)
		short short2 = 1;
		int int2 = short2;
		char char3 = 1 ; //(2 byte)
//		short2 = char3; //(2 byte)
//		char3 = short2; //char과 short둘다 2byte인데 왜 형변환이 안될까?
		//byte만 아니라 표현하는 "방식"까지 생각해야 한다. short는 부호구가 있는 형태이고 char은 부호구가 없는 형태 (부호구야..부호부야..)
		//short는 음수까지 받을수 있지만 char은 음수를 받을수 없다. 범위 자체도 short는 양수값이 0 ~30000대이고 char은 0~60000대이다. (범위적 문제로 들어가지 못한다)
		
//		float float3 = 3.14F;
//		int2 = float3; 이것또한 범위적 문제로 들어가지 않는다.
		
		// 강제 형 변환(명시적 형 변환)
		//차지하는 범위가 큰 데이터 타입은 범위가 작은 데이터 타입으로 대입할 때 
		//형변환을 명시해야 함.
		// 강제 형 변환의 경우 overflow(범위 초과)가 발생 할 수 있음.
		short2 = (short) int2; //타입을 명시해줘야 한다.
		//기본 데이터 타입은 형변환 잘 하지 않는다.
		
		
		//참조형 데이터 타입
		//기본 데이터 타입이 아닌 메모리 주소를 참조하는 데이터 타입
		// 시작하는 객체 데이터 또는 배열이 어디서부터 시작하는지 참조...
		// 클래스 
		// 기본 데이터 타입과 다르게 첫문자가 대문자로 시작됨
		// 대표적인 참조형 데이터 타입 : String
		// String은 문자열(문자의 배열) 담을 수 있는 참조형 데이터 타입
		String string1 = "This is Comment"; //실제 데이터 값은 메모리 주소다. 대문자로 시작하는건 메모리 주소를 가진다.
		
	}

}